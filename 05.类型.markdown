# 类型
***
#### 1. 基本类型
+ 数字

        23
        0x0FF
        1.234e7
    
    Go中数字文字的类型是在使用场合决议的，类似C++的模板，因此，下面的代码完全合法（因为不会有任何数值损失）：
    
        var a int8 = 3.0

    可用的变量类型包括int，int8~int64，uint，uint8~uint64，byte，float32，float64，complex64，complex128，其中int和int32是不同的类型，不会发生类型转换。
+ 字符串

        "Hello, world\n"
        "\xFF"       // 1 byte
        "\u00FF"     // 1 Unicode char, 2 bytes of UTF-8

    raw字符串：
    
        `\n\.abc\t\`
        
    字符串的类型是string，以长度而非结尾的0来界定，默认是UTF-8编码。相关类型rune等价于int，用来描述一个字符。用一个UTF-8编码的string来构造一个rune数组，可以用于计算字符个数。比如下面的代码会输出两个true：
    
        str := "中国"
        runes := []rune(str)
        println(len(str) == 6)
        println(len(runes) == 2)

***
#### 2. 数组
区别于C语言，数组是值类型，而非指针，对数组变量赋值、或作为参数传递的时候，会进行整个数组的拷贝，开销很大。包含5个int的数组[5]int，相当于C语言中：    

        struct Array_int5 {
            int a[5];
        } a;

在Go中，声明一个数组的语法包括：
    
        var a2 = [5]int{}
        var a [5]int
        a3 := [5]int{}
        a4 := [...]int {0, 0, 0, 0, 0, }
        
Go中所有的对象都是值（指针是包装过后的地址值），因此要注意避免不恰当的对数组进行拷贝带来的性能损失
***
#### 3. 动态数组（Slice）
动态数组又被翻译为切片，是引用类型，它提供了追加(append)和切片([])动作，用于追加一个数组的内容，或者得到子数组的引用。
Slice的类型是[]int，注意和数组的区别，[]int的括号中没有数字，表示元素个数未定。

要创建一个Slice，可以有两种方式。

法1，用make函数：

        va := make([]int, 5)

这行代码创建了一个包含5个0的int数组，注意，类型是[]int而非[5]int，后者是数组，是值，而Slice是引用。

法2，用字面值直接构建：

        va := []int{0, 0, 0, 0, 0, }

Slice是引用类型，意味着下面的语句输出true：

        va := []int{0, 0, 0, 0, 0, }
        vb := va
        va[0] = 5
        println(vb[0] == 5)

将上面的第一行改为：

        va := [5]int{0, 0, 0, 0, 0, }

则会输出false

往Slice后面追加元素：

        va = append(va, 1)

既然Slice是引用类型，而其实Slice本身又被实现为复合结构，那为何这里还必须要有一个赋值语句？这就不得而知了...

和Python类似的语法，可以取得子Slice的引用（这是没有开销的动作）：

        vb := va[:]
        vb = va[1:]
        vb = va[:-1] // slice index out of bounds

第一行语句得到整个Slice的引用；第二行获取后(n - 1)个元素的引用；最后一行被告知越界了，没能得到期望的前(n - 1)个元素的结果，遗憾...
***
#### 4. 字典
字典提供了快速key-value的索引，其类型为map[keyType]valueType，如map[int]int，表示一个int映射到int的查找表。

要创建一个字典，仍然是两种方法，make函数，和字面值：

        va := make(map[int]int)
        vb := map[int]int{1:2, 4:16}
    
而下面的语句，分别用来插入（或修改）、删除、以及读取（或测试存在性）字典内容：

        va[1] = 5
        delete(vb, 1)
        valueOfKey4, exist := vb[4]

***
