# 背景
***
+ 由Google在2007年9月开始设计，2009年11月正式宣布推出，在Linux、Mac以及Windows上有实现。2012年3月发布Go 1.0版本，承诺向后兼容。

+ 包括gcco和6g/8g/5g两个版本的编译器，后者由Google实现，包括x86、x64和arm架构。在现有的发布包中可以直接使用go命令来进行编译和部署。

+ 团队成员包括Ken Thompson（图灵奖得主，Unix之父，和Dennis Ritchie共同设计了B语言、C语言），Rob Pike（前贝尔实验室成员，和Thompson合作多年，参与设计了Unix、Plan9操作系统以及UTF-8编码），Robert Griesemer（参与设计Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8），豪华的全明星阵容~
 
+ 定位为21世纪的C语言
 
# 为什么选择Go
***
+ 支持垃圾回收（GC）
+ 安全的指针
+ 基于依赖链的编译模型，闪电版的编译速度（理论上能在数秒内处理百万行代码）
+ 一些脚本语言的特性，易于使用
+ 静态类型安全
+ 自动类型推断
+ 理论上仅次于C/C++的执行效率
+ 强大的标准库
+ 从语言层面直接支持并发
+ Google的支持和壮大中的社区

# 缺陷和争议点
***
+ 强制性的以编码风格为规范。“{”或“else”放在第二行开头报错，导入了库或者声明了变量没用报错，类型或变量的首字母大写则包外可见...
+ 垃圾回收暂时实现为保守的标记清除GC（Mark and sweep），仍然存在延迟问题
+ 调度器不够完善
+ 没有专业的IDE方案
+ 出现时间太短，开源和标准库的积累都不够成熟，暂时没有太多成功项目
