# 控制结构
***
#### 1. if
Go中的条件表达式不用()括起来，但是后面的true分支的语句以及else分支的语句，都必须用{}括起来。这同时也就解决了C语言中else悬挂的问题。

if语句分为1元式和2元式。

1元式和C语言等价：

        a := true
        if a { println("a is true") } else { println("a is false") }

另外，整数和指针已经不能自动转换为布尔表达式了：

        b := 1
        if b { } // non-bool b (type int) used as if condition

而2元式（当然，下面也可以只用单返回值）：

        if ret, ok := callFunc(); ok {
            println("now process ret", ret)
        }

等价于C语言中：

        {
            int ret;
            bool ok;
            callFunc(&ret, &ok);
            if (ok) {
                printf("now process ret: %d\n", ret);
            }
        }

其实2元式就是Go团队认为if语句（包括后面的for语句）这种一气呵成的局部变量用法比较常用而设计的。
***
#### 2. for
for语句包括0~3原式4种基本情况，以及一个额外的range用法。

0元式子：

        for {
            println("infinite loop until break")
        }

等价于C中的while (true)用法或者for (;;)用法。

1元式

        for exp {
        }

等价于C中while (exp)或者for (; exp; )。

至于2元式和3元式，也就对应的等价于for (int i = 0; i < 10; )和for (int i = 0; i < 10; ++i)了。

最后一种特殊用法，range，用于遍历容器：

        a := []int {1, 2, 3}
        for i, v := range a {
            println(i, "=", v)
        }

这两段代码分别是遍历数组和字典。

        for i, v := range map[int]int{1:1, 2:4, 3:9} {
            println(i, "=", v)
        }

熟悉Lua的同学应该很容易理解，这两个range分别对应于Lua的ipairs和pairs，而在Python这样的语言里，直接用for i, v in container，连range之类的函数都省了。
***
#### 3. switch
switch也包括0~2元式，以及一个特殊的type assertion用法。

其中2元式不过是1元式的局部变量声明变化，而1元式和C语言中基本一样，除了下面的几点：

+ 表达式不必一定是常量，甚至可以不必是int。自然，想要case "abc":完全没问题。
+ 没有自动的fall through
+ 但作为替代，语法上，最后的语句可以为fallthrough
+ 多case可以用逗号分隔

一个典型的例子：

        switch count % 7 {
            case 4, 5, 6: error()
            case 3: a *= v; fallthrough
            case 2: a *= v; fallthrough
            case 1: a *= v; fallthrough
            case 0: return a * v
        }
        
至于switch的0元式，其实是一个if、else if链的简化写法：

        a, b := x[i], y[j]
        switch {
            case a < b: return -1
            case a == b: return 0
            case a > b: return 1
        }

注意，这里的每个case表达式都是运行时的布尔值，不再是一个枚举序列。0元式的效果是，从上到下依次计算，表达式为真时，执行后面对应的语句。

最后是type assertion用法。

首先要提一下，什么是type assertion：在Go中interface{}类型，表示基本类型，该类型的变量，可以用于指向任意值，从一个具体值到interface{}的过程中，会进行装箱，故interface{}类型类似于其他语言中，所有class的基类Object。而将值从interface{}中拆箱出来的动作，在Go中被称为type assertion。其实从名称上很容易理解，拆箱时指定了错误类型，导致抛出异常，当然就是type assertion。

语法如下：

        var i int = 1
        var box interface{} = i // automate box
        var i2 int = box.(int) // unbox
        var f float32 = box.(float32) //  interface conversion: interface is int, not float32

最后一句拆箱失败。

这就是type assertion。而它被用在switch中时，语义发生了变化，不再是拆箱，而是类型判断：

        var box interface{} = 1
        switch box.(type) {
            case int: println("box is a int")
            case float32: println("box is a float32")
        }

注意，因为在Go中，类型字面值并不是对象，上面的case int是一种特殊的语法，故下面的写法都是错误的：

        var box interface{} = 1
        b := box.(type) // use of .(type) outside type switch
        if (int == box.(type)) {} // use of .(type) outside type switch

***
